from fastapi import FastAPI, Request, HTTPException
from telegram import Bot, Update
from telegram.error import TelegramError
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = Bot(token=TOKEN)

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    return {"message": "ADHD Planner Bot is running!", "status": "ok"}

@app.post("/")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = Update.de_json(data, bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            await handle_message(update)
        
        return {"ok": True}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def handle_message(update: Update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.message
    chat_id = message.chat.id
    text = message.text
    
    try:
        if text == "/start":
            welcome_text = (
                "üß† –ü—Ä–∏–≤–µ—Ç! –Ø ADHD Planner Bot!\n\n"
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "/help - –ø–æ–º–æ—â—å\n"
                "/plan - —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω\n"
                "/tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏"
            )
            await bot.send_message(chat_id=chat_id, text=welcome_text)
            
        elif text == "/help":
            help_text = (
                "üìù –ü–æ–º–æ—â—å –ø–æ ADHD Planner Bot:\n\n"
                "üéØ /plan - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω –∏–ª–∏ –∑–∞–¥–∞—á—É\n"
                "üìã /tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏\n"
                "‚è∞ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å –∏ –Ω–µ –∑–∞–±—ã—Ç—å –≤–∞–∂–Ω–æ–µ!\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∏ —è –ø–æ–º–æ–≥—É –µ—ë –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å."
            )
            await bot.send_message(chat_id=chat_id, text=help_text)
            
        elif text == "/plan":
            plan_text = (
                "üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å\n"
                "‚Ä¢ –ö–æ–≥–¥–∞ (–≤—Ä–µ–º—è/–¥–∞—Ç–∞)\n"
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π)\n\n"
                "–ü—Ä–∏–º–µ—Ä: '–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≤—Ç—Ä–∞ –≤ 18:00 –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'"
            )
            await bot.send_message(chat_id=chat_id, text=plan_text)
            
        elif text == "/tasks":
            tasks_text = (
                "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
                "–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plan —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!"
            )
            await bot.send_message(chat_id=chat_id, text=tasks_text)
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
            if len(text) > 5:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ
                response_text = (
                    f"üìù –ü–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É: '{text}'\n\n"
                    "–•–æ—á–µ—à—å –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —ç—Ç–æ –≤ –ø–ª–∞–Ω?\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π /plan –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!"
                )
            else:
                response_text = (
                    "ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
                )
            
            await bot.send_message(chat_id=chat_id, text=response_text)
            
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)