from fastapi import FastAPI, Request
from telegram import Bot, Update
import os
import json

app = FastAPI()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

if TOKEN:
    bot = Bot(token=TOKEN)
else:
    bot = None
    print("WARNING: BOT_TOKEN not found")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    return {
        "message": "ADHD Planner Bot is running!", 
        "status": "ok",
        "token_available": bool(TOKEN),
        "bot_ready": bool(bot)
    }

@app.post("/")
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç Telegram"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not bot:
            return {"error": "Bot not initialized - check BOT_TOKEN", "ok": False}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        body = await request.body()
        data = json.loads(body)
        
        print(f"Received webhook data: {data}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = Update.de_json(data, bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update and update.message and update.message.text:
            await handle_message(update)
        
        return {"ok": True}
    
    except Exception as e:
        error_msg = f"Webhook error: {str(e)}"
        print(error_msg)
        return {"error": error_msg, "ok": False}

async def handle_message(update: Update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        message = update.message
        chat_id = message.chat.id
        text = message.text
        
        print(f"Processing message: {text} from chat: {chat_id}")
        
        if text == "/start":
            welcome_text = (
                "üß† –ü—Ä–∏–≤–µ—Ç! –Ø ADHD Planner Bot!\n\n"
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "/help - –ø–æ–º–æ—â—å\n"
                "/plan - —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω"
            )
            await bot.send_message(chat_id=chat_id, text=welcome_text)
            
        elif text == "/help":
            help_text = (
                "üìù –ü–æ–º–æ—â—å –ø–æ ADHD Planner Bot:\n\n"
                "üéØ /plan - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
                "‚è∞ –Ø –ø–æ–º–æ–≥—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å!\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."
            )
            await bot.send_message(chat_id=chat_id, text=help_text)
            
        elif text == "/plan":
            plan_text = (
                "üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∏ —è –ø–æ–º–æ–≥—É –µ—ë –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å!\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≤—Ç—Ä–∞ –≤ 18:00'"
            )
            await bot.send_message(chat_id=chat_id, text=plan_text)
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            response_text = (
                f"üìù –ü–æ–ª—É—á–∏–ª: '{text}'\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!"
            )
            await bot.send_message(chat_id=chat_id, text=response_text)
            
    except Exception as e:
        print(f"Error handling message: {e}")

# –î–ª—è Vercel –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç handler
handler = app