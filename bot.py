import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from datetime import datetime, timedelta

TASKS = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")],
        [InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="show_tasks")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–ª–∞–Ω–µ—Ä. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "add_task":
        await query.edit_message_text("""–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:

–º–æ–Ω–æ–∫—Å–µ—Ä 15 –º–∏–Ω
—É–±–æ—Ä–∫–∞ 1.5 —á
–¥–æ–º–∞—à–∫–∞ 90–º–∏–Ω""")
    elif query.data == "show_tasks":
        if not TASKS:
            await query.edit_message_text("–ü–æ–∫–∞ –∑–∞–¥–∞—á –Ω–µ—Ç.")
        else:
            text = "\n".join([f"{i+1}. {t['title']} ‚Äî {t['duration']} –º–∏–Ω" for i, t in enumerate(TASKS)])
            await query.edit_message_text(f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{text}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    pattern = r"(\d+(?:[.,]\d+)?)\s*(—á|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω|–º|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|–º–∏–Ω\.)"
    match = re.search(pattern, text)
    if match:
        duration_str, unit = match.groups()
        duration = float(duration_str.replace(',', '.'))
        if unit.startswith('—á'):
            duration_minutes = int(duration * 60)
        else:
            duration_minutes = int(duration)

        title = re.sub(pattern, '', text).strip()
        if not title:
            title = "–ó–∞–¥–∞—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        TASKS.append({"title": title, "duration": duration_minutes})
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ ¬´{title}¬ª –Ω–∞ {duration_minutes} –º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n–º–æ–Ω–æ–∫—Å–µ—Ä 15 –º–∏–Ω\n—É–±–æ—Ä–∫–∞ 1 —á–∞—Å")

def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
